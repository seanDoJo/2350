module GuessGame(clock, Reset, Ready, Set, Iter, Digit3, Digit2, Digit1, Digit0);
	input clock, Reset, Ready, Set, Iter;
	wire [3:0]R0, R1, R2, R3;
	output wire [1:7]Digit3, Digit2, Digit1, Digit0;
	reg [3:0]Y, y,  dig1En, dig2En, dig3En, dig4En;
	reg [3:0]guesses, G0, G1, G2, G3;
	reg Ren;
	
	parameter init = 4'b0001, g1 = 4'b0010, g2 = 4'b0011, g3 = 4'b0100, g4 = 4'b0101, cmp= 4'b0110;
	parameter less = 4'b0111, sub = 4'b1000, win = 4'b1001, lose = 4'b1010;
	
	parameter num = 4'b0000, i = 4'b0001, H = 4'b0010, o = 4'b0011, L = 4'b0100, s = 4'b0101, e = 4'b0110, Y = 4'b0111, A = 4'b1000, Empty = 4'b1001;
	
	initial begin
		Y <= init;
		Ren = 1;
	end
	
	BCDcount random(clock, Ren, R3, R2, R1, R0);
	seg7 digit1(G0, Digit0, dig1En);
	seg7 digit2(G1, Digit1, dig2En);
	seg7 digit3(G2, Digit2, dig3En);
	seg7 digit4(G3, Digit3, dig4En);

	always @ (negedge Ready, negedge Set, y, negedge Iter)
	begin
		case(y)
			init:
				begin
					G0 <= 4'b0000;
					G1 <= 4'b0000;
					G2 <= 4'b0000;
					G3 <= 4'b0000;
					dig1En = num;
					dig2En = num;
					dig3En = num;
					dig4En = num;
					guesses <= 4'b1010;
					Ren = 1;
					if (!Ready)
					begin
						Y = g1;
						Ren = 0;
					end
					else
						Y = init;
				end
				
			g1:
				begin
					if (!Set)
					begin
						Y = g2;
					end
					else if (!Iter)
					begin
						if (G0 == 4'b1001)
							G0 <= 4'b0000;
						else
							G0 = G0 + 1
					end
				end
				
			g2:
				begin
					if (!Set)
					begin
						Y = g3;
					end
					else if (!Iter)
					begin
						if (G1 == 4'b1001)
							G1 <= 4'b0000;
						else
							G1 = G1 + 1
					end
				end
			
			g3:
				begin
					if (!Set)
					begin
						Y = g4;
					end
					else if (!Iter)
					begin
						if (G2 == 4'b1001)
							G2 <= 4'b0000;
						else
							G2 = G2 + 1
					end
				end
			
			g4:
				begin
					if (!Set)
					begin
						Y = cmp;
					end
					else if (!Iter)
					begin
						if (G3 == 4'b1001)
							G3 <= 4'b0000;
						else
							G3 = G3 + 1
					end
				end
				
			cmp:
				begin
					if (G3 == R3 && G2 == R2 && G1 == R1 && G0 == R0)
						Y = win;
					else
						Y = less;
				end
			
			less:
				begin
					if (G3 == R3)
					begin
						if (G2 == R2)
						begin
							if (G1 == R1)
							begin
								if (G0 < R0)
									//print Lo
								else
									//print Hi
							end
							else if (G1 < R1)
								//print Lo
							else
								//print Hi
						end
						else if (G2 < R2)
							//print Lo
						else
							//print Hi
					end
					else if (G3 < R3)
						//print Lo
					else
						//print Hi
					
					if (!Ready)
						Y = sub;
					else
						Y = less;
				end
			
			sub:
				begin
					guesses = guesses - 1;
					if (!guesses)
						Y = lose;
					else
					begin
						G0 <= 0;
						G1 <= 0;
						G2 <= 0;
						G3 <= 0;
						Y = g1;
					end
				end
			
			lose:
				begin
					//print Lose
					Y = init;
				end
			
			win:
				begin
					//print win
					Y = init;
				end
		endcase
	end
	
	always @ (posedge clock)
	begin
		if (Reset)
			y <= init;
		else
			y <= Y;
	end

module BCDcount(clk, En, BCD3, BCD2, BCD1, BCD0);
	input clk, En;
	output reg [3:0]BCD3, BCD2, BCD1, BCD0;
	
	always @ (posedge clk)
	begin
		if (En)
		begin
			if (BCD3 == 4'b0001)
			begin
				BCD3 <= 0;
				BCD2 <= 0;
				BCD1 <= 0;
				BCD0 <= 0;
			end
			
			else
			begin
				if(BCD0 == 4'b1001)
				begin
					BCD0 <= 0;
					if(BCD1 == 4'b1001)
					begin
						BCD1 <= 0;
						if (BCD2 == 4'b1001)
						begin
							BCD2 <= 0;
							BCD3 <= 4'b0001;
						end
						else
							BCD2 = BCD2 + 1;
					end
					else
						BCD1 = BCD1 + 1;
				end
				else
					BCD0 = BCD0 + 1;
			end
		end
endmodule

module seg7(bcd, leds, DigEn)
	input [3:0] bcd, DigEn;
	output reg [1:7] leds;
	parameter num = 4'b0000, i = 4'b0001, H = 4'b0010, o = 4'b0011, L = 4'b0100, s = 4'b0101, e = 4'b0110, Y = 4'b0111, A = 4'b1000; 
	
	always @ (bcd, DigEn)
		case (DigEn)
			num:
				begin
					case(bcd)
						0: leds = 7'b0000001;
						1: leds = 7'b1001111;
						2: leds = 7'b0010010;
						3: leds = 7'b0000110;
						4: leds = 7'b1001100;
						5: leds = 7'b0100100;
						6: leds = 7'b0100000;
						7: leds = 7'b0001111;
						8: leds = 7'b0000000;
						9: leds = 7'b0000100;
						default: leds = 7'bx;
					endcase
				end
			i: leds = 7'b1001111;
			H: leds = 7'b1001000;
			o: leds = 7'b1100010;
			L: leds = 7'b1110001;
			s: leds = 7'b0100100;
			e: leds = 7'b0110000;
			Y: leds = 7'b1000100;
			A: leds = 7'b0001000;
			default: leds = 7'b1111111;
		endcase
endmodule 				
		